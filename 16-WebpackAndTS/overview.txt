========================
WEBPACK AND TYPESCRIPT
========================

This next section is all about 
using TS and webpack together

=========================================
But first what's the purpose of webpack?
=========================================

Well webpack allows us to take complicated 
applications that may consist of hundreds or thousands 
of different files with dependencies, using import 
and export, split things into different files 
and have third party libraries

Webpack allows us to take all the above and create 
bundles, or packs 

It combines them, shrinks them, compresses them into 
smaller bundles 

There's a ton more JS these days, especially with 
SPA's, so instead of the JS being all there, 
the browser may need to make many requests to load 
different JS files

The page is built on the client-side, so it may 
bring over the html and css to start, but then make 
many requests for the different JS files to build the 
SPA 

So how do we manage this JS? How do we bundle 
them together to make them as compact as possible? 
To make as few requests as possible?

 Well for each script, it requires a new HTTP request
 in the browser, which can lead to a bottleneck 

 And writing code in one massive JS file is not ideal 
 as a dev it can be a challenge working in one gigantic 
 JS file, so how do we balance this?

 We balance it with webpack, webpack allows us to 
 grab many different assets, js files, sass, templating
 languages, boil it down into one bundled file that 
 we can load as a single script 

 At it's core webpack is a static module bundler for 
 JS applications, when webpack processes your app, it 
 internally builds a dependency graph from one or 
 more entry points then combines every module the 
 project needs into one or more bundles, which are 
 static assets  to serve your content from

Though the tricky part with webpack, especially with 
TS is the config step, how do we set webpack in a way 
that will work well, which takes practice, and some 
copying and pasting 

=======================
SETTING UP OUR PROJECT
=======================

    Now let's practice by setting up a simple 
    app with a couple different files that are 
    connected, which we'll have webpack bundle 

    After adding and using tsc to compile to JS, we have 
    an index.html with a script tag: 

     <script type="module" src="dist/index.js"></script>

     And in that index.js we have: 

     import Dog from "./Dog.js";
import ShelterDog from "./shelterDog.js";
import { add, multiply, divide, subtract } from "./utilities.js";
const maggie = new Dog("Maggie", 2, "cava-corgi");
maggie.bark();
console.log("from index.ts");
console.log(add(4, 5), multiply(4, 5), subtract(20, 4), divide(10, 2));
const buffy = new ShelterDog("Max", 3, "lab", true);

So the main index.js has these imports from other JS files, 
and if we go into the network tab in the browser, 
using live-server btw, then look at JS we see that 
there's all the scripts, index.js, Dog.js, shelterDog.js,
utilities.js, then something called chunk-d8251103.js

And they're loading sequentially, they are all separate 
scripts that had to be loaded, they're all separate 
requests, and this is a simple example but let's 
pretend we had 100 different files, different libraries 
etc.. 

Now let's add lodash and use the lodash _add() for 
another dependency 

So in the utilities ts file, we now have: 

import _ from "lodash"

// were going to use the lodash add() to power 
// our add function, just as a demo to illustrate 
// more on dependencies

export function add(x: number, y: number){
return _.add(x, y)
}

So our add() now depends on lodash, lodash needs to load 
before anything can happen in the add() func

And if we check the browser, we've got an error, now 
we can use webpack to help us bundle these files 
together

===================
Installing Webpack
===================

To install webpack and some of the dependencies 
we'll need to use it we run: 

npm install --save-dev webpack webpack-cli typescript ts-loader

In order to use or call webpack, we also need to 
install webpack-cli,  and we also added typescript, 
which should always be included in the package.json 
so if anyone is collaborating, they can see the exact 
version we're using, and ts-loader, which is the 
middle man between TS and webpack, and what it will do 
is use tsc then hand that over to webpack for bundling

And if you go to webpack's website, there are 
many different loaders, some for files, for json, babel
vue js, angular and so on

=============================
Configuring Webpack
=============================

Before we can use webpack, it needs to be 
configured, which is a bit of a pain, but needs 
to be done 

First in the root, create a webpack.config.js file 
then inside we add: 

const path = require("path")

module.exports = {
     
}

Then we'll add a few things inside the brackets, 
and if you go to the webpack docs https://webpack.js.org/configuration/
you'll see a lot of options explaining what the 
config steps are 

But let's step through them one by one 

const path = require("path")

module.exports = {
    // first is the entry point below, 
    // and what the entry point does is 
    // allow us to specify the entry point for 
    // bundling, in our case it's the index.ts 
    // file in the src directory  
    entry: "./src/index.ts",
    // Then below we add module {} and 
    // inside of module, we add a rules array
    // and the rules array will help webpack know 
    // what to do when it encounters js files, or 
    // sass files, or static assets etc.. 
    module: {
        rules: [
          {
            test: /\tsx?$/,
            // the above looks strange so 
            // let's break it down peice by peice, 
            // the '$' means this pattern must come 
            // at the end of a file, and the '?' 
            // is in case were using tsx, otherwise 
            // it's just ts were using, the '?' is 
            // ignored, then if that file is found, 
            // like a TS file, below we tell 
            // webpack what to use 
            use: "ts-loader",
            // and we're going to use ts-loader,
            // from those dependencies we installed 
            // earlier if you remember, then we also 
            // add exclude
            exclude: /node_modules/
            // and the reason to exclude node modules 
            // is because it usually has a lot of TS 
            // files, we don't want it to load 
            // all of those 
          },
        ],
    },
    // then we add resolve, and the types of 
    // files we want webpack to resolve
    resolve: {
        extensions: [".tsx", ".ts", ".js" ]
    },
    // then we need to include the output, 
    // and we need to use that path.resolve 
    // that we brought in at the top with const path 
    // and the path.resolve, the first arg is 
    // saying put it in this current directory, 
    // and the second arg is saying, then put 
    // it in the dist folder of that directory
    output: {
        filename: "bundle.js"
        path: path.resolve(__dirname, 'dist'),
    }
  
}

Then we go to the package.json and add a script, 
"build": "webpack"
// which will execute webpack when we enter npm run build 
// which only works since we do have webpack cli 
// installed 

// So after running npm run build, we see that webpack 
is trying to work but we're getting a few errors, 
first thing is the error is all the .js file 
extensions in our ts files, so inside them we need to 
change the import Dog from Dog.js to just import Dog 
from "./Dog"

Now we're getting another error: 

ERROR in ./src/utilities.ts 7:21
Module parse failed: Unexpected token (7:21)
You may need an appropriate loader to handle
 this file type, currently no
  loaders are configured to process
   this file. 
   See https://webpack.js.org/concepts#loaders

And this error is from the test: /\tsx?$/
We need to add a prefixed dot: 
test: /\.tsx?$/,

And yes after running npm run build for a final 
time. we do get a warning but it bundles our files into 
a massive bundle.js file

And now if we want to use the bundle we need 
to link to it in the index.html like we would 
with any other script, 
<script type="module" src="dist/bundle.js"></script>

And we can get rid of type="module" since it's 
now a single bundled together file:

<script src="dist/bundle.js"></script>

And yes after opening with live server, all the 
console.logs are there, but they're coming from 
bundle.js 

Now there is a caveat. how do we debug this bundle file? 
It's gigantic and verbose, what is we need to identify 
and change something?

So how do we do this? SOURCE MAPS 
Type Declaration files don't end in just .ts, 
they end in .d.ts

These files serve a very special purpose, in a .d.ts 
file there is only type information, declarations 
of types, which TS can then look at and enforce 
 type rules on our code

 Let's say we do tsc --init in a new folder and create 
 an src/index.ts 

 then type in console. after the dot you'll have 
 the auto complete for things located in the console

 TS knows about the console in the lib.dom.d.ts file when 
 you right click on console and click the
  type definition in VSCode

  there's an interface console that 
  has a lot of methods like clear() and log() 
  all the console methods available on the console 
  object

  And remember in the default tsconfig file, 
  "lib": [] is commented out, it's using the 
  default

  But when we work with third party libraries, 
  we need to utilize that lib, but first let's 
  create an src folder with an index.ts

  and in the tsconfig change "outDir": "./dist"

  and at the bottom add  ,"include": ["src"]

  run tsc and now we have a new empty index.js file in 
  the dist folder

  Next up we'll install axios library, which is a third 
  party library we can install that helps with 
  HTTP requests, and we'll execute with node

And we're going to use axios to make a request to 
a basic json placeholder api

That just has placeholder resources, like posts, and 
if we look at /posts we get a json response that will look like:

[ 
    {

    "userid: 1,
    "id": 1,
    "title": "lorem ipsum dolor"
    "body": "more lorem ipsum but much longer"

   },

   more json objects below
]

First though we need to import axios, we've installed it, 
it is in our package.json

and in our index.ts file at the top:

import axios from "axios";

axios

then right click on axios and click type definiton, 
we see axios came with a huge type definition file, 
the index.d.ts file

That means it's all set up for us, we don't need 
to do any extra work, all the type definitions are 
ready to go, but the next library we'll look at will 
not come with type definitions

And axios gives us many different methods like 
axios.get and axios.post etc..

In the next section we'll go over a basic json placeholder
api, we use axios to retrieve an endpoint 
that has json objects full of user data 

Check the notes in the index.ts for overview of axios section

=============================
INSTALLING TYPES SEPARATELY
=============================

Now let's look at a library that DOESN'T come 
with it's own type definitions, the library 
we'll look at is Lodash

Lodash is a library that includes many utility 
functions, things like _.shuffle() to get 
a random element in an array, _.partition to 
partition an array based on a given function 
many different utility functions, but they DON'T 
include type definitions

So if we look inside of node_modules and go into 
the lodash folder, then open the package.json, we 
see that there are no type definitions in there, 
in the axios package.json, there were many

If we want to use lodash in TS, we need to find the 
corresponding type defintions elsewhere, good news 
that most of the popular JS libraries will have 
pre-existing type definition files that have 
been created for them, they usually will just 
need to be installed separately

And if we go to the official TS Docs, you'll see 
has a section on 'consumption' how to consume 
type declarations

Getting type declarations requires no tools apart from 
npm 

Getting declarations for a library like lodash takes 
nothing more than the following command: 

npm install --save-dev @types/lodash

A lot of the type definitions for libraries comes from 
a repo on github called: DefinitelyTyped 

Now in our index.ts, the error is gone, we have our index.d.ts 
and if we right click on _.shuffle() and click 
type definition, we're good to go, we have the .d.ts 
file 

But the main takeaway is that in order to get 
the types for a library, if they're available 
at least you run: 

npm install --save-dev @types/libraryNameHere 

And a final note, on the TS docs you can 
actually search for the library, and it will bring 
up the command to enter to add types for that given 
JS library, and for ex if we search for 
axios on the TS docs, it will only display 
npm i axios, because it knows axios is a library 
that comes with type definitions included